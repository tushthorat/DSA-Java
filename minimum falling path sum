class Solution {
    public int func(int row,int col,int[][] matrix,int[][] dp){
        if(row<0 || col<0 || col>matrix.length-1){
            return Integer.MAX_VALUE;
        }
        if(row==0){return matrix[row][col];}

        if(dp[row][col]!=-1)return dp[row][col];

        int left = func(row-1,col-1,matrix,dp);
        int up = func(row-1,col,matrix,dp);
        int right =func(row-1,col+1,matrix,dp);

        return dp[row][col] = matrix[row][col]+Math.min(up,Math.min(left,right));
    }
    public int minFallingPathSum(int[][] matrix) {
        int min = Integer.MAX_VALUE;
        int n = matrix.length;
        int[][] dp = new int[n][n];
        for(int[] row : dp){
            Arrays.fill(row,-1);
        }
        for(int i=0;i<matrix.length;i++){
            dp[0][i] = matrix[0][i];
        }
        for(int i=1; i<matrix.length; i++){
            for(int j=0; j<matrix.length; j++){
                int left = Integer.MAX_VALUE;
                int up = Integer.MAX_VALUE; 
                int right = Integer.MAX_VALUE;
                if(j>0){
                    left = dp[i-1][j-1];
                }
                up = dp[i-1][j];
                if(j<n-1){
                    right = dp[i-1][j+1];
                }

                dp[i][j] = matrix[i][j] + Math.min(up,Math.min(left,right));
            }
        }
        for(int i=0;i<matrix.length;i++){
            min = Math.min(min,dp[n-1][i]);
        }
        return min;
    }
}
